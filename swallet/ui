package main

import ( 
	"fmt"
	ui "github.com/gizak/termui"
)

func promptOnePassword(label string) string {
	err := ui.Init()
	if err != nil {
		panic(err)
	}
	defer ui.Close()

	var password = ""

	p := ui.NewPar("|")
	p.Height = 3
	p.Width = 50
	p.X = 5
	p.TextFgColor = ui.ColorWhite
	p.BorderLabel = label

	ui.Render(p)

	//Handle when someone presses the enter key
	ui.Handle("/sys/kbd/<enter>", func(e ui.Event) {
		ui.StopLoop()
	})

	//Handle when someone presses the tab key
	ui.Handle("/sys/kbd/<tab>", func(e ui.Event) {
		//Nothing should happen
	})

	//Handle data entry into the textbox
	ui.Handle("/sys/kbd", func(e ui.Event) {

		//Handle backspaces
		if (string(e.Data.(ui.EvtKbd).KeyStr) == "C-8") {
			if (len(password) > 0) {
				password = password[:len(password) - 1]
				p.Text = p.Text[:len(p.Text) - 2] //Remove the cursor and star from the end
				p.Text = p.Text + "|" //Add the cursor back
			}

		//Handle writing into the textboxes
		} else {
			password = password + string(e.Data.(ui.EvtKbd).KeyStr)
			p.Text = p.Text[:len(p.Text) - 1] //Remove the cursor from the end
			p.Text = p.Text + "*|" //Add star and then the cursor back
		}

		ui.Render(p)
	})

	ui.Handle("/sys/kbd/esc", func(ui.Event) {
		//If ESC is used, stop the loop and exit
		ui.StopLoop()
	})

	ui.Handle("/sys/kbd/C-c", func(ui.Event) {
		//If CTRL-C is used, stop the loop and exit
		ui.StopLoop()
	})

	ui.Handle("/sys/kbd/C-x", func(ui.Event) {
		//If CTRL-X is used, stop the loop and exit
		ui.StopLoop()
	})

	ui.Loop()

	return password
}

func promptTwoPasswords(label1 string, label2 string) (string, string) {
	err := ui.Init()
	if err != nil {
		panic(err)
	}
	defer ui.Close()

	var password1 = ""
	var password2 = ""
	var textboxActive = 0

	//This is textbox 0
	p := ui.NewPar("|")
	p.Height = 3
	p.Width = 50
	p.X = 5
	p.TextFgColor = ui.ColorWhite
	p.BorderLabel = label1

	//This is textbox 1
	g := ui.NewPar("")
	g.Height = 3
	g.Width = 50
	g.X = 5
	g.Y = 4
	g.TextFgColor = ui.ColorWhite
	g.BorderLabel = label2

	ui.Render(p, g)

	//Handle when someone presses the enter key
	ui.Handle("/sys/kbd/<enter>", func(e ui.Event) {
		if (textboxActive == 0) {
			//Move on to the next textbox

			p.Text = p.Text[:len(p.Text) - 1] //Remove the cursor from the end of p
			textboxActive = 1
			g.Text = "|" //Add cursor to the end of g

			ui.Render(p, g)
		} else if (textboxActive == 1) {
			//User entry is complete
			ui.StopLoop()
		}
	})

	//Handle when someone presses the tab key
	ui.Handle("/sys/kbd/<tab>", func(e ui.Event) {
		if (textboxActive == 0) {
			//Move on to the next textbox

			p.Text = p.Text[:len(p.Text) - 1] //Remove the cursor from the end of p
			textboxActive = 1
			g.Text = "|" //Add cursor to the end of g
		} else if (textboxActive == 1) {
			//Move back to the first textbox

			g.Text = p.Text[:len(g.Text) - 1] //Remove the cursor from the end of g
			textboxActive = 0
			p.Text = "|" //Add cursor to the end of p
		}

		ui.Render(p, g)
	})

	//Handle data entry into the textbox
	ui.Handle("/sys/kbd", func(e ui.Event) {

		//Handle backspaces
		if (string(e.Data.(ui.EvtKbd).KeyStr) == "C-8") {
			if ((textboxActive == 0) && (len(password1) > 0)) {
				//We're removing from textbox 0

				password1 = password1[:len(password1) - 1]
				p.Text = p.Text[:len(p.Text) - 2] //Remove the cursor and star from the end
				p.Text = p.Text + "|" //Add the cursor back
			} else if ((textboxActive == 1) && (len(password2) > 0)) {
				//We're removing from textbox 1

				password2 = password2[:len(password1) - 1]
				g.Text = g.Text[:len(g.Text) - 2] //Remove the cursor and star from the end
				g.Text = g.Text + "|" //Add the cursor back
			}

		//Handle writing into the textboxes
		} else if (textboxActive == 0) {
			//We're writing in textbox 0

			password1 = password1 + string(e.Data.(ui.EvtKbd).KeyStr)
			p.Text = p.Text[:len(p.Text) - 1] //Remove the cursor from the end
			p.Text = p.Text + "*|" //Add star and then the cursor back
		} else if (textboxActive == 1) {
			//We're writing in textbox 1

			password2 = password2 + string(e.Data.(ui.EvtKbd).KeyStr)
			g.Text = g.Text[:len(g.Text) - 1] //Remove the cursor from the end
			g.Text = g.Text + "*|" //Add star and then the cursor back
		}

		ui.Render(p, g)
	})

	ui.Handle("/sys/kbd/esc", func(ui.Event) {
		//If ESC is used, stop the loop and exit
		ui.StopLoop()
	})

	ui.Handle("/sys/kbd/C-c", func(ui.Event) {
		//If CTRL-C is used, stop the loop and exit
		ui.StopLoop()
	})

	ui.Handle("/sys/kbd/C-x", func(ui.Event) {
		//If CTRL-X is used, stop the loop and exit
		ui.StopLoop()
	})

	ui.Loop()

	return password1, password2
}

func main() {
	password1, password2 := promptTwoPasswords("New wallet password", "New wallet password (confirm)")
	fmt.Printf("[test 1] new wallet passwords: %s %s\n", password1, password2)

	password3 := promptOnePassword("Wallet password")

	/*password4 = ""
	for i := 0; i < len(password3); i++ {
		if ((len(password3) - i) == 0) {
			break
		}

		if ()
	}*/

	fmt.Printf("[test 2] wallet password: %s\n", password3)

	password1, password2 := promptTwoPasswords("New wallet password", "New wallet password (confirm)")
	fmt.Printf("[test 1] new wallet passwords: %s %s\n", password1, password2)

}
